image: docker:stable

stages:
    - build
    - test
    - push-artifacts
    - deploy-canary
    - deploy-prod
    - deploy-review

variables:
  # When using dind, it's wise to use the overlayfs driver for improved performance.
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  CLOUD_PROJECT: mab-testing
  PROJECT_NAME: kuard
  APP_NAME: kuard
  CLUSTER_NAME: devfest
  CLUSTER_ZONE: europe-west3-c
  IMAGE_REPO: eu.gcr.io/${CLOUD_PROJECT}/${PROJECT_NAME}/${APP_NAME}
  IMAGE_TAG: $CI_COMMIT_REF_SLUG.${CI_COMMIT_SHA:0:8} 

services:
  - docker:dind
  
.setup-builder: &builder_setup
  image: $CI_REGISTRY_IMAGE:latest

  before_script: 
    # Write our GCP service account private key into a file.
    - echo "$GCLOUD_SERVICE_KEY" | base64 -d > /gcloud-service-key.json
    - gcloud auth activate-service-account --key-file /gcloud-service-key.json 
    - gcloud auth configure-docker
    - gcloud container clusters get-credentials "$CLUSTER_NAME" --zone "$CLUSTER_ZONE" --project "$CLOUD_PROJECT"

.deploy-filter: &deploy_filter
  only:
    - master
    - development
    - feature-*  

.review-filter: &review_filter
    except:
        - master

build-make:
  stage: build
  before_script: 
    - apk add --update alpine-sdk
  script:
    - cd kuard
    - time make build 
  artifacts:
   paths:
    - kuard/bin/


test:
  stage: test
  script:
    # TODO: add tests lol
    - echo "all ok"
    
build-n-publish-image:
  <<: *builder_setup
  <<: *deploy_filter

  stage: push-artifacts

  script:
    - docker build --pull --cache-from $IMAGE_REPO:latest -t $IMAGE_REPO:latest -t $IMAGE_REPO:$CI_BUILD_REF .
    - docker push $IMAGE_REPO:latest 
    - docker push $IMAGE_REPO:$CI_BUILD_REF

deploy-canary:
  stage: deploy-canary
  only:
    - master
  <<: *builder_setup
  script:
    - sed -i "s#IMAGE_TAG#$IMAGE_REPO:$IMAGE_TAG#" k8s/kuard-canary.yaml
    - kubectl apply -f k8s/kuard-canary.yaml

destroy-canary:
  stage: deploy-canary
  when: manual
  only:
    - master
  <<: *builder_setup
  script:
    - kubectl delete -f k8s/kuard-canary.yaml

deploy-prod:
  stage: deploy-prod
  when: manual
  only:
    - master
  <<: *builder_setup
  script:
    - sed -i "s#IMAGE_TAG#$IMAGE_REPO:$IMAGE_TAG#" k8s/kuard-prod.yaml
    - kubectl apply -f k8s/kuard-prod.yaml

review-deploy:
  stage: deploy-review
  when: manual
  <<: *review_filter 
  environment:
    name: stage-$CI_COMMIT_REF_SLUG
    url: https://$REVIEW_URL
  <<: *builder_setup
  variables:
    NAMESPACE: $CI_COMMIT_REF_SLUG
  script: 
    - sed -i "s#IMAGE_TAG#$IMAGE_REPO:$IMAGE_TAG#" k8s/kuard-prod.yaml
    - kubectl create namespace "$NAMESPACE"
    - kubectl apply -n "$NAMESPACE" -f k8s/kuard-prod.yaml

review-destroy:
  stage: deploy-review
  when: manual
  <<: *review_filter
  environment:
    name: stage-$CI_COMMIT_REF_SLUG
    url: https://$REVIEW_URL
  <<: *builder_setup
  variables:
    NAMESPACE: $CI_COMMIT_REF_SLUG
  script:
    - kubectl delete namespace "$NAMESPACE"

builder-image:
  stage: build
  only:
    - master
  when: manual
  script: 
    - echo "$GCLOUD_SERVICE_KEY" | base64 -d > /gcloud-service-key.json
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest -f  pipeline-builder/Dockerfile -t $CI_REGISTRY_IMAGE:$CI_BUILD_REF -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE
    
k8s-infra:
  stage: build
  when: manual
  only:
    - master
  <<: *builder_setup
  script:
    - kubectl apply -f k8s/infra/
