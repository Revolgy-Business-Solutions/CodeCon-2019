image: docker:stable

stages:
    - build-image
    - test
    - push-image
    - deploy-development
    - deploy-feature
    - deploy-canary
    - deploy-prod

variables:
  # When using dind, it's wise to use the overlayfs driver for improved performance.
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375/
  CLOUD_PROJECT: __GOOGLE_CLOUD_PROJECT_ID__ #replace
  CLUSTER_NAME: __GOOGLE_KUBERNETES_ENGINE_PROJECT_NAME__ #replace
  PROJECT_NAME: codecon
  APP_NAME: demoapp
  CLUSTER_ZONE: europe-west1-c #replace
  IMAGE_REPO: eu.gcr.io/${CLOUD_PROJECT}/${PROJECT_NAME}/${APP_NAME}
  IMAGE_TAG: "$CI_COMMIT_REF_SLUG.$CI_COMMIT_SHA"
  CONTAINER_TEST_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG.$CI_COMMIT_SHA"

services:
  - docker:dind
  
.setup-builder: &builder_setup
  image: $CI_REGISTRY_IMAGE:latest

  before_script: 
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # Write our GCP service account private key into a file.
    - echo "$GCLOUD_SERVICE_KEY" | base64 -d > /gcloud-service-key.json
    - gcloud auth activate-service-account --key-file /gcloud-service-key.json 
    - gcloud auth configure-docker
    - gcloud container clusters get-credentials "$CLUSTER_NAME" --zone "$CLUSTER_ZONE" --project "$CLOUD_PROJECT"

.deploy-filter: &deploy_filter
  only:
    - master
    - development
    - /^feature-k8s.*$/  

.feature-filter: &feature_filter
  only:
    - /^feature-k8s.*$/

build-image:
  <<: *builder_setup
  <<: *deploy_filter

  stage: build-image

  script:
    - cd app
    - docker build -t "$CONTAINER_TEST_IMAGE" .
    - docker push "$CONTAINER_TEST_IMAGE"

test:
  <<: *builder_setup
  <<: *deploy_filter

  stage: test

  script:
    - docker pull "$CONTAINER_TEST_IMAGE"
    # tests, right...? #yolo
    - sleep 3
    - echo "all ok"
    
publish-image:
  <<: *builder_setup
  <<: *deploy_filter

  stage: push-image

  script:
    - docker pull "$CONTAINER_TEST_IMAGE"
    - docker tag "$CONTAINER_TEST_IMAGE" "$IMAGE_REPO":latest
    - docker tag "$CONTAINER_TEST_IMAGE" "$IMAGE_REPO:$IMAGE_TAG"
    - docker push "$IMAGE_REPO":latest 
    - docker push "$IMAGE_REPO:$IMAGE_TAG"

deploy-development:
  <<: *builder_setup

  only:
    - development

  stage: deploy-development

  variables:
    NAMESPACE: $CI_COMMIT_REF_SLUG
    RELEASE_NAME: $APP_NAME-$CI_COMMIT_REF_SLUG

  script: 
    - kubectl create namespace "$NAMESPACE" || echo "namespace already exists"
    - set -x 
    - |
       helm upgrade --install --force --namespace development --debug $APP_NAME \
         --set replicas=1 \
         --set image.repository="$IMAGE_REPO" \
         --set image.tag="$IMAGE_TAG" \
         --set namespace="$NAMESPACE" \
         ./helm/
    - time kubectl rollout status -n development deployment/$APP_NAME

feature-deploy:
  <<: *feature_filter 
  <<: *builder_setup

  stage: deploy-feature

  environment:
    name: $CI_COMMIT_REF_SLUG

  variables:
    NAMESPACE: $CI_COMMIT_REF_SLUG
    RELEASE_NAME: $APP_NAME-$CI_COMMIT_REF_SLUG

  script: 
    - kubectl create namespace "$NAMESPACE" || echo "namespace already exists"
    - set -x 
    - |
       helm upgrade --install --force --namespace $NAMESPACE --debug $RELEASE_NAME \
         --set replicas=1 \
         --set image.repository="$IMAGE_REPO" \
         --set image.tag="$IMAGE_TAG" \
         --set namespace=$NAMESPACE \
         ./helm/
    - time kubectl rollout status -n $NAMESPACE deployment/$RELEASE_NAME

feature-teardown:
  <<: *feature_filter
  <<: *builder_setup

  stage: deploy-feature

  when: manual

  environment:
    name: $CI_COMMIT_REF_SLUG

  variables:
    NAMESPACE: $CI_COMMIT_REF_SLUG
    RELEASE_NAME: $APP_NAME-$CI_COMMIT_REF_SLUG

  script:
    - helm del --purge $RELEASE_NAME
    - kubectl delete namespace "$NAMESPACE"
    
stage-deploy:
  <<: *builder_setup

  stage: deploy-feature

  only:
    - master

  environment:
    name: $CI_COMMIT_REF_SLUG

  variables:
    NAMESPACE: stage
    RELEASE_NAME: $APP_NAME-$CI_COMMIT_REF_SLUG

  script: 
    - kubectl create namespace "$NAMESPACE" || echo "namespace already exists"
    - set -x 
    - |
       helm upgrade --install --force --namespace $NAMESPACE --debug $RELEASE_NAME \
         --set replicas=1 \
         --set image.repository="$IMAGE_REPO" \
         --set image.tag="$IMAGE_TAG" \
         --set namespace=$NAMESPACE \
         ./helm/
    - time kubectl rollout status -n $NAMESPACE deployment/$RELEASE_NAME

deploy-canary:
  <<: *builder_setup

  stage: deploy-canary

  only:
    - master

  variables:
    RELEASE_NAME: $APP_NAME-canary

  script:
    - set -x
    - |
       helm upgrade --install --force --debug $RELEASE_NAME \
         --set replicas=1 \
         --set image.repository="$IMAGE_REPO" \
         --set image.tag="$IMAGE_TAG" \
         ./helm/
    - time kubectl rollout status deployment/$RELEASE_NAME

destroy-canary:
  <<: *builder_setup

  stage: deploy-canary

  when: manual

  only:
    - master

  variables:
    RELEASE_NAME: $APP_NAME-canary

  script:
    - helm del --purge $RELEASE_NAME

deploy-prod:
  <<: *builder_setup

  stage: deploy-prod

  when: manual

  only:
    - master

  variables:
    RELEASE_NAME: $APP_NAME-prod

  script:
    - set -x
    - |
       helm upgrade --install --force --debug $RELEASE_NAME \
         --set replicas=5 \
         --set image.repository="$IMAGE_REPO" \
         --set image.tag="$IMAGE_TAG" \
         ./helm/
    - time kubectl rollout status deployment/$RELEASE_NAME

k8s-infra:
  <<: *builder_setup

  stage: build-image

  when: manual

  only:
    - master

  script:
    - kubectl apply -f k8s/infra/
    - helm init --service-account tiller  --debug --upgrade
